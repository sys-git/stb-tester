# Automated tests to verify your gstreamer + OpenCV installation.
# Run with ./run-tests.sh

EXPECT_RESULT=1
DONT_EXPECT_RESULT=0
EXPECT_MOTION=1
DONT_EXPECT_MOTION=0

# Test for stbt-motiondetect element from stbt.
#
# You may need to set GST_PLUGIN_PATH to point where you installed
# stbt-motiondetect element.
#
test_gstreamer_can_find_stbt_motiondetect() {
    gst-inspect stbt-motiondetect >/dev/null
}

# Test that stbt-motiondetect does not process the source by default.
#
test_stbt_motiondetect_is_not_active_by_default() {
    run_motiondetect "videotestsrc" "" "$scratchdir/gst-launch.log"
    check_expectations_from_log \
            $DONT_EXPECT_RESULT $DONT_EXPECT_MOTION "$scratchdir/gst-launch.log"
}

# Test that stbt-motiondetect does not process the source when disabled.
#
test_stbt_motiondetect_is_not_active_when_disabled() {
    run_motiondetect "videotestsrc" "enabled=false" "$scratchdir/gst-launch.log"
    check_expectations_from_log \
            $DONT_EXPECT_RESULT $DONT_EXPECT_MOTION "$scratchdir/gst-launch.log"
}

# Test that stbt-motiondetect reports motion from videotestsrc.
#
test_stbt_motiondetect_reports_motion() {
    run_motiondetect "videotestsrc" "enabled=true" "$scratchdir/gst-launch.log"
    check_expectations_from_log \
            $EXPECT_RESULT $EXPECT_MOTION "$scratchdir/gst-launch.log"
}

# Test that stbt-motiondetect does not report motion from a freezed videotestsrc.
#
test_stbt_motiondetect_does_not_report_motion() {
    run_motiondetect \
            "videotestsrc ! imagefreeze" "enabled=true" \
            "$scratchdir/gst-launch.log"
    check_expectations_from_log \
            $EXPECT_RESULT $DONT_EXPECT_MOTION "$scratchdir/gst-launch.log"
}

# Test that stbt-motiondetect reports motion with a mask that selects only the
# moving part from videotestsrc.
#
test_stbt_motiondetect_with_mask_reports_motion() {
    run_motiondetect \
            "videotestsrc" \
            "enabled=true mask=videotestsrc-mask-video.png" \
            "$scratchdir/gst-launch.log"
    check_expectations_from_log \
            $EXPECT_RESULT $EXPECT_MOTION "$scratchdir/gst-launch.log"
}

# Test that stbt-motiondetect does not report motion with a mask that selects 
# only the steady part from videotestsrc.
#
test_stbt_motiondetect_with_mask_does_not_report_motion() {
    run_motiondetect \
            "videotestsrc" \
            "enabled=true mask=videotestsrc-mask-no-video.png" \
            "$scratchdir/gst-launch.log"
    check_expectations_from_log \
            $EXPECT_RESULT $DONT_EXPECT_MOTION "$scratchdir/gst-launch.log"
}

# Run stbt-motiondetect on the specified source pipeline with the specified
# parameters; with GST_DEBUG=4, the log file specified will contain the bus
# messages generated by gstreamer.
#
run_motiondetect() {
    local source_pipeline="$1"
    local parameters="$2"
    local log="$3"

    GST_DEBUG=4 timeout 2 gst-launch \
        $source_pipeline ! \
        ffmpegcolorspace ! \
        stbt-motiondetect $parameters ! \
        ffmpegcolorspace ! \
        ximagesink \
    > "$log" 2>&1

    if [ $? -ne $timedout ]; then
        echo "Failed to launch gstreamer pipeline; see '$log'"
        return 1
    fi
}

# The motiondetect element sends a bus message for each frame it processes
# from the second frame; with GST_DEBUG=4 we can see the bus messages; and
# the grep command will allow to know whether motion was detected or not.
#
check_expectations_from_log() {
    local expect_result="$1"
    local expect_motion="$2"
    local log="$3"

    result=`grep 'motiondetect.*has_motion=(boolean)\(true\|false\)' "$log"`
    [[ $? -eq 0 ]] && got_result=GOT_RESULT || got_result=DIDNT_GET_RESULT

    motion_detected_string=`echo $result | grep 'has_motion=(boolean)true'`
    [[ $? -eq 0 ]] && motion_detected=GOT_MOTION || \
            motion_detected=DIDNT_GET_MOTION

    no_motion_detected_string=`echo $result | grep 'has_motion=(boolean)false'`
    [[ $? -eq 0 ]] && no_motion_detected=GOT_NO_MOTION || \
            no_motion_detected=DID_NOT_GET_NO_MOTION

    echo -e "\n$result"

    case $expect_result:$got_result:$expect_motion:$motion_detected:$no_motion_detected in
        $DONT_EXPECT_RESULT:GOT_RESULT:*:*:*) 
            echo "did not expect a result." >&2
            return 1;;
        $EXPECT_RESULT:DIDNT_GET_RESULT:*:*:*)
            echo "expected a result but nothing was reported." >&2
            return 1;;
        $EXPECT_RESULT:GOT_RESULT:$EXPECT_MOTION:DIDNT_GET_MOTION:*)
            echo "'has_motion=true' not reported." >&2
            return 1;;
        $EXPECT_RESULT:GOT_RESULT:$EXPECT_MOTION:*:GOT_NO_MOTION)
            echo "'has_motion=false' incorrectly reported." >&2
            echo "$no_motion_detected_string" >&2
            return 1;;
        $EXPECT_RESULT:GOT_RESULT:$DONT_EXPECT_MOTION:GOT_MOTION:*)
            echo "'has_motion=true' incorrectly reported." >&2
            echo "$motion_result" >&2
            return 1;;
        $EXPECT_RESULT:GOT_RESULT:$DONT_EXPECT_MOTION:*:DID_NOT_GET_NO_MOTION)
            echo "'has_motion=false' not reported." >&2
            return 1;;
        *:*:*:*:*) return 0;;
    esac
}
